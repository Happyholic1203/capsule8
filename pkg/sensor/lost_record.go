// Copyright 2018 Capsule8, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sensor

import "github.com/Happyholic1203/capsule8/pkg/sys/perf"

// LostRecordType represents the type of a lost record.
type LostRecordType int

const (
	// LostRecordTypeUnknown is a lost record of unknown type.
	LostRecordTypeUnknown LostRecordType = iota

	// LostRecordTypeSubscription is a lost record from a subscription.
	// It may include kprobes, uprobes, network events, syscalls, etc. but
	// it does not include meta events like process, container, or file
	// monitoring events. This type is only ever sent to a specific
	// subscription that has lost a kernel generated event.
	LostRecordTypeSubscription

	// LostRecordTypeProcess is a lost record relating to process meta
	// events. This type is broadcast to all subscriptions, regardless of
	// whether they've explicitly subscribed to process events or not,
	// because it affects everything.
	LostRecordTypeProcess

	// LostRecordTypeContainer is a lost record relating to container meta
	// events. This type is broadcast to all subscriptions, regardless of
	// whether they've explicitly subscribed to process events or not,
	// because it affects everything.
	LostRecordTypeContainer

	// LostRecordTypeFileCreate is a lost record relating to file create
	// events. It is only sent to subscriptions that are subscribed to file
	// create events.
	LostRecordTypeFileCreate

	// LostRecordTypeFileDelete is a lost record relating to file delete
	// events. It is only sent to subscriptions that are subscribed to file
	// delete events.
	LostRecordTypeFileDelete

	// LostRecordTypeFileLink is a lost record relating to file link events.
	// It is only sent to subscriptions that are subscribed to file link
	// events.
	LostRecordTypeFileLink

	// LostRecordTypeFileSymlink is a lost record relating to file symlink
	// events. It is only sent to subscriptions that are subscribed to file
	// link events.
	LostRecordTypeFileSymlink

	// LostRecordTypeFileOpenModify is a lost record relating to file open
	// modify events. It is only sent to subscriptions that are subscribed
	// to file open modify events.
	LostRecordTypeFileOpenModify

	// LostRecordTypeFileCloseModify is a lost record relating to file close
	// modify events. It is only sent to subscriptions that are subscribed
	// to file close modify events.
	LostRecordTypeFileCloseModify

	// LostRecordTypeFileModify is a lost record relating to file modify
	// events. It is only sent to subscriptions that are subscribed to file
	// modify events.
	LostRecordTypeFileModify

	// LostRecordTypeFileRename is a lost record relating to file rename
	// events. It is only sent to subscriptions that are subscribed to file
	// rename events.
	LostRecordTypeFileRename

	// LostRecordTypeFileAttributeChange is a lost record relating to file
	// attribute change events. It is only sent to subscriptions that are
	// subscribed to file attribute change events.
	LostRecordTypeFileAttributeChange
)

// LostRecordTelemetryEvent is a telemetry event generated by lost records
type LostRecordTelemetryEvent struct {
	TelemetryEventData

	Lost uint64
	Type LostRecordType
}

// CommonTelemetryEventData returns the telemtry event data common to all
// telemetry events for a lost record telemetry event.
func (e LostRecordTelemetryEvent) CommonTelemetryEventData() TelemetryEventData {
	return e.TelemetryEventData
}

// InitWithSampleID initializes a LostRecordTelemetryEvent for dispatch.
func (e *LostRecordTelemetryEvent) InitWithSampleID(
	sensor *Sensor,
	sampleID perf.SampleID,
	count uint64,
) {
	e.Init(sensor)
	e.MonotimeNanos = int64(sampleID.Time) - sensor.bootMonotimeNanos
	e.CPU = sampleID.CPU
	e.Lost = count
}
